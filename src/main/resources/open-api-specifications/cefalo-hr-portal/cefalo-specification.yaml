---
servers:
  - url: "https://localhost:5001"
openapi: "3.0.1"
info:
  title: "Cefalo Attendance Management API"
  version: "v1"
paths:
  /api/Users/{id}/Attendances/{FromDate}/{ToDate}:
    get:
      tags:
      - "Attendance"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "IncludeWeekends"
        in: "query"
        schema:
          type: "boolean"
      - name: "IncludeHolidays"
        in: "query"
        schema:
          type: "boolean"
      - name: "StatusType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
  /api/Attendances/{FromDate}/{ToDate}:
    get:
      tags:
      - "Attendance"
      parameters:
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "statusType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AttendanceDto"
  /api/Attendances/{id}:
    put:
      tags:
      - "Attendance"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/AttendanceUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/AttendanceUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/AttendanceUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/AttendanceUpsertDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AttendanceDto"
            application/json:
              schema:
                $ref: "#/components/schemas/AttendanceDto"
            text/json:
              schema:
                $ref: "#/components/schemas/AttendanceDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/Users/{id}/Attendances/{FromDate}/{ToDate}/Download:
    get:
      tags:
      - "Attendance"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "IncludeWeekends"
        in: "query"
        schema:
          type: "boolean"
      - name: "IncludeHolidays"
        in: "query"
        schema:
          type: "boolean"
      - name: "StatusType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
  /api/Attendances/{FromDate}/{ToDate}/Download:
    get:
      tags:
      - "Attendance"
      parameters:
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "statusType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
  /api/Attendances:
    get:
      tags:
      - "Attendance"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamAttendanceStatusDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamAttendanceStatusDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamAttendanceStatusDto"
  /api/Attendances/StatusTypes:
    get:
      tags:
      - "Attendance"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/StatusTypeDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/StatusTypeDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/StatusTypeDto"
  /api/Attendances/DataSync/{FromDate}/{ToDate}:
    post:
      tags:
      - "Attendance"
      parameters:
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      responses:
        "200":
          description: "Success"
  /api/Authentication/Internal:
    post:
      tags:
      - "Authentication"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/InternalLoginDto"
          application/json:
            schema:
              $ref: "#/components/schemas/InternalLoginDto"
          text/json:
            schema:
              $ref: "#/components/schemas/InternalLoginDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/InternalLoginDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
            text/json:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
  /api/Authentication/Google:
    post:
      tags:
      - "Authentication"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/GoogleLoginDto"
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginDto"
          text/json:
            schema:
              $ref: "#/components/schemas/GoogleLoginDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/GoogleLoginDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
            text/json:
              schema:
                $ref: "#/components/schemas/AuthenticationUserResponseDto"
  /Api/ExtraWorkApplications:
    post:
      tags:
      - "ExtraWorkApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationInsertionDto"
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationInsertionDto"
          text/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationInsertionDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationInsertionDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    get:
      tags:
      - "ExtraWorkApplications"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
  /Api/ExtraWorkApplications/{id}:
    put:
      tags:
      - "ExtraWorkApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationUpdateDto"
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationUpdateDto"
          text/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationUpdateDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkApplicationUpdateDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    get:
      tags:
      - "ExtraWorkApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "ExtraWorkApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /Api/ExtraWorkApplications/Status:
    patch:
      tags:
      - "ExtraWorkApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkStatusChangeDto"
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkStatusChangeDto"
          text/json:
            schema:
              $ref: "#/components/schemas/ExtraWorkStatusChangeDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/ExtraWorkStatusChangeDto"
      responses:
        "200":
          description: "Success"
  /Api/Users/{userId}/ExtraWorkApplications:
    get:
      tags:
      - "ExtraWorkApplications"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          default: 0
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkApplicationDetailDto"
  /Api/ExtraWorkApplications/DataFilePreview:
    post:
      tags:
      - "ExtraWorkApplications"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                ContentType:
                  type: "string"
                  nullable: true
                ContentDisposition:
                  type: "string"
                  nullable: true
                Headers:
                  type: "object"
                  additionalProperties:
                    type: "array"
                    items:
                      type: "string"
                  nullable: true
                Length:
                  type: "integer"
                  format: "int64"
                Name:
                  type: "string"
                  nullable: true
                FileName:
                  type: "string"
                  nullable: true
            encoding:
              ContentType:
                style: "form"
              ContentDisposition:
                style: "form"
              Headers:
                style: "form"
              Length:
                style: "form"
              Name:
                style: "form"
              FileName:
                style: "form"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkDataImportDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkDataImportDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraWorkDataImportDto"
  /Api/ExtraWorkApplications/Upload:
    post:
      tags:
      - "ExtraWorkApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/ExtraWorkDataImportDto"
              nullable: true
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/ExtraWorkDataImportDto"
              nullable: true
          text/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/ExtraWorkDataImportDto"
              nullable: true
          application/*+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/ExtraWorkDataImportDto"
              nullable: true
      responses:
        "200":
          description: "Success"
  /Api/ExtraWorkApplications/AllStatus:
    get:
      tags:
      - "ExtraWorkApplications"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/ExtraWorkApplications/AllTypes:
    get:
      tags:
      - "ExtraWorkApplications"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/File:
    post:
      tags:
      - "File"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - "FormFile"
              type: "object"
              properties:
                FormFile:
                  type: "string"
                  format: "binary"
                FileType:
                  type: "string"
                  nullable: true
            encoding:
              FormFile:
                style: "form"
              FileType:
                style: "form"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
            application/json:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
            text/json:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
  /api/File/{fileName}:
    get:
      tags:
      - "File"
      parameters:
      - name: "fileName"
        in: "path"
        required: true
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
  /api/File/ValidationCriteria/{fileType}:
    get:
      tags:
      - "File"
      parameters:
      - name: "fileType"
        in: "path"
        required: true
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/FileValidationCriteria"
            application/json:
              schema:
                $ref: "#/components/schemas/FileValidationCriteria"
            text/json:
              schema:
                $ref: "#/components/schemas/FileValidationCriteria"
  /Api/LeaveApplications:
    post:
      tags:
      - "LeaveApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          text/json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    get:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
  /Api/LeaveApplications/{id}:
    put:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          text/json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/LeaveApplicationDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    get:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /Api/Users/{userId}/LeaveApplications:
    get:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          default: 0
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveApplicationDetailDto"
  /Api/LeaveApplications/Status:
    patch:
      tags:
      - "LeaveApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/LeaveStatusChangeDto"
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveStatusChangeDto"
          text/json:
            schema:
              $ref: "#/components/schemas/LeaveStatusChangeDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/LeaveStatusChangeDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/LeaveStatusChangeDto"
            application/json:
              schema:
                $ref: "#/components/schemas/LeaveStatusChangeDto"
            text/json:
              schema:
                $ref: "#/components/schemas/LeaveStatusChangeDto"
  /Api/LeaveApplications/DataFilePreview:
    post:
      tags:
      - "LeaveApplications"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                ContentType:
                  type: "string"
                  nullable: true
                ContentDisposition:
                  type: "string"
                  nullable: true
                Headers:
                  type: "object"
                  additionalProperties:
                    type: "array"
                    items:
                      type: "string"
                  nullable: true
                Length:
                  type: "integer"
                  format: "int64"
                Name:
                  type: "string"
                  nullable: true
                FileName:
                  type: "string"
                  nullable: true
            encoding:
              ContentType:
                style: "form"
              ContentDisposition:
                style: "form"
              Headers:
                style: "form"
              Length:
                style: "form"
              Name:
                style: "form"
              FileName:
                style: "form"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveDataImportDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveDataImportDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveDataImportDto"
  /Api/LeaveApplications/Upload:
    post:
      tags:
      - "LeaveApplications"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveDataImportDto"
              nullable: true
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveDataImportDto"
              nullable: true
          text/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveDataImportDto"
              nullable: true
          application/*+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveDataImportDto"
              nullable: true
      responses:
        "200":
          description: "Success"
  /Api/LeaveApplications/AllStatus:
    get:
      tags:
      - "LeaveApplications"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/LeaveApplications/AllTypes:
    get:
      tags:
      - "LeaveApplications"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/LeaveApplications/LeaveTypes/{userId}:
    get:
      tags:
      - "LeaveApplications"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/Users/{userId}/LeaveBalance/{year}:
    get:
      tags:
      - "LeaveBalance"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
  /Api/Users/LeaveBalance/{year}:
    get:
      tags:
      - "LeaveBalance"
      parameters:
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveBalanceSummaryDto"
  /Api/Users/LeaveBalance/LeaveStatistics/{year}:
    get:
      tags:
      - "LeaveBalance"
      parameters:
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "Name"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "TeamNames"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveStatisticsDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveStatisticsDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveStatisticsDto"
  /Api/Users/LeaveBalance/LeaveStatistics/{year}/Download:
    get:
      tags:
      - "LeaveBalance"
      parameters:
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "Name"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "TeamNames"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
  /Api/Users/LeaveBalance/Adjust/{year}:
    get:
      tags:
      - "LeaveBalance"
      parameters:
      - name: "year"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      responses:
        "200":
          description: "Success"
  /Api/Users/LeaveBalance/DataFilePreview:
    post:
      tags:
      - "LeaveBalance"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                dataFile:
                  type: "string"
                  format: "binary"
                  nullable: true
            encoding:
              dataFile:
                style: "form"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
  /Api/Users/LeaveBalance/Upload:
    post:
      tags:
      - "LeaveBalance"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
              nullable: true
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
              nullable: true
          text/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
              nullable: true
          application/*+json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/LeaveCarryForwardDataImportDto"
              nullable: true
      responses:
        "200":
          description: "Success"
  /Api/OfficeTimings:
    post:
      tags:
      - "OfficeTimings"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          application/json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          text/json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            application/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            text/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    get:
      tags:
      - "OfficeTimings"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OfficeTimingDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OfficeTimingDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OfficeTimingDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/OfficeTimings/{id}:
    put:
      tags:
      - "OfficeTimings"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          application/json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          text/json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/OfficeTimingDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            application/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            text/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    get:
      tags:
      - "OfficeTimings"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            application/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
            text/json:
              schema:
                $ref: "#/components/schemas/OfficeTimingDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "OfficeTimings"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/Profiles:
    post:
      tags:
      - "Profiles"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/ProfileUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/ProfileUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/ProfileUpsertDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/Users/{id}/Profile:
    get:
      tags:
      - "Profiles"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/{id}/Profile/Short:
    get:
      tags:
      - "Profiles"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/BloodGroups:
    get:
      tags:
      - "Profiles"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
            text/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
  /api/Skills:
    get:
      tags:
      - "Profiles"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
            text/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "string"
  /api/PublicHolidays/{id}:
    get:
      tags:
      - "PublicHoliday"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            application/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    put:
      tags:
      - "PublicHoliday"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          application/json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          text/json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            application/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "PublicHoliday"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/PublicHolidays:
    get:
      tags:
      - "PublicHoliday"
      parameters:
      - name: "year"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PublicHolidayDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PublicHolidayDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PublicHolidayDto"
    post:
      tags:
      - "PublicHoliday"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          application/json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          text/json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/PublicHolidayDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            application/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PublicHolidayDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/PublicHolidays/File:
    post:
      tags:
      - "PublicHoliday"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - "FormFile"
              type: "object"
              properties:
                FormFile:
                  type: "string"
                  format: "binary"
                FileType:
                  type: "string"
                  nullable: true
            encoding:
              FormFile:
                style: "form"
              FileType:
                style: "form"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
            application/json:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
            text/json:
              schema:
                $ref: "#/components/schemas/FileUpsertDto"
  /Api/RemoteWorkApplications:
    get:
      tags:
      - "RemoteWorkApplication"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkApplicationDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkApplicationDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkApplicationDto"
    post:
      tags:
      - "RemoteWorkApplication"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          text/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            text/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/Users/{userId}/RemoteWorkApplications/{id}:
    get:
      tags:
      - "RemoteWorkApplication"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            text/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
  /Api/Users/{userId}/RemoteWorkApplications:
    get:
      tags:
      - "RemoteWorkApplication"
      parameters:
      - name: "FromDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "query"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ApplicationType"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "ApplicationStatus"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
          nullable: true
      - name: "PageNumber"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "PageSize"
        in: "query"
        schema:
          type: "integer"
          format: "int32"
      - name: "SearchValue"
        in: "query"
        schema:
          type: "string"
          nullable: true
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            text/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
  /Api/RemoteWorkApplications/AllApplicationStatus:
    get:
      tags:
      - "RemoteWorkApplication"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /Api/RemoteWorkApplications/Type:
    get:
      tags:
      - "RemoteWorkApplication"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkStatusTypeDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkStatusTypeDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RemoteWorkStatusTypeDto"
  /Api/RemoteWorkApplications/{id}:
    delete:
      tags:
      - "RemoteWorkApplication"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    put:
      tags:
      - "RemoteWorkApplication"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          text/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkApplicationDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
            text/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkApplicationDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /Api/RemoteWorkApplications/UpdateStatus:
    patch:
      tags:
      - "RemoteWorkApplication"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
          text/json:
            schema:
              $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
            application/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
            text/json:
              schema:
                $ref: "#/components/schemas/RemoteWorkChangeStatusDto"
  /Api/Settings:
    post:
      tags:
      - "Settings"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/SettingsDto"
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsDto"
          text/json:
            schema:
              $ref: "#/components/schemas/SettingsDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/SettingsDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/SettingsDto"
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/SettingsDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    get:
      tags:
      - "Settings"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/SettingsDto"
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/SettingsDto"
  /Api/Settings/Leave:
    get:
      tags:
      - "Settings"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/LeaveSettingsDto"
            application/json:
              schema:
                $ref: "#/components/schemas/LeaveSettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/LeaveSettingsDto"
  /Api/Settings/PolicyDocs:
    get:
      tags:
      - "Settings"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PolicyDocsSettingsDto"
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyDocsSettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PolicyDocsSettingsDto"
  /Api/Settings/Profile:
    get:
      tags:
      - "Settings"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ProfileSettingsDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ProfileSettingsDto"
  /api/Teams:
    get:
      tags:
      - "Teams"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    post:
      tags:
      - "Teams"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Teams/{id}:
    get:
      tags:
      - "Teams"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    put:
      tags:
      - "Teams"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TeamUpsertDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "Teams"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/Teams/Member:
    get:
      tags:
      - "Teams"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamWithMembersDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamWithMembersDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamWithMembersDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Teams/{teamId}/Member:
    get:
      tags:
      - "Teams"
      parameters:
      - name: "teamId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamWithMembersDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TeamWithMembersDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamWithMembersDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Teams/Members:
    post:
      tags:
      - "Teams"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: "string"
              nullable: true
          application/json:
            schema:
              type: "string"
              nullable: true
          text/json:
            schema:
              type: "string"
              nullable: true
          application/*+json:
            schema:
              type: "string"
              nullable: true
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TeamMemberDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TeamMemberDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TeamMemberDto"
  /api/Teams/GenerateReport:
    post:
      tags:
      - "Teams"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                SelectedTeamMemberIds:
                  type: "string"
                  nullable: true
                TemporaryFileName:
                  type: "string"
                  nullable: true
                Remarks:
                  type: "string"
                  nullable: true
            encoding:
              SelectedTeamMemberIds:
                style: "form"
              TemporaryFileName:
                style: "form"
              Remarks:
                style: "form"
      responses:
        "200":
          description: "Success"
  /api/TotalWorkingDays/{FromDate}/{ToDate}:
    get:
      tags:
      - "TotalWorkingDays"
      parameters:
      - name: "FromDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "ToDate"
        in: "path"
        required: true
        schema:
          type: "string"
          format: "date-time"
      - name: "includeHalfDay"
        in: "query"
        schema:
          type: "boolean"
          default: false
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "integer"
                format: "int32"
            application/json:
              schema:
                type: "integer"
                format: "int32"
            text/json:
              schema:
                type: "integer"
                format: "int32"
  /api/Users:
    get:
      tags:
      - "Users"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    post:
      tags:
      - "Users"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
      responses:
        "201":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/Current:
    get:
      tags:
      - "Users"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserWithTeamDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/{id}:
    get:
      tags:
      - "Users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
    put:
      tags:
      - "Users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UserUpsertDto"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
    delete:
      tags:
      - "Users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "204":
          description: "Success"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "412":
          description: "Client Error"
        "500":
          description: "Server Error"
  /api/Users/{id}/Details:
    get:
      tags:
      - "Users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/{userId}/TeamMembers:
    get:
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamMemberDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamMemberDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeamMemberDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/Active/Profiles:
    get:
      tags:
      - "Users"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
            text/json:
              schema:
                $ref: "#/components/schemas/ProfileDto"
  /api/Users/Roles:
    get:
      tags:
      - "Users"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EnumDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/AttendanceStatistics/{userId}:
    get:
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
  /api/Users/LeaveStatistics/{userId}:
    get:
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
            application/json:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
            text/json:
              schema:
                $ref: "#/components/schemas/UserAttendanceStatDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Server Error"
components:
  schemas:
    AttendanceStatusType:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      type: "integer"
      format: "int32"
    AttendanceStatusGroup:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      type: "integer"
      format: "int32"
    AttendanceDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        date:
          type: "string"
          format: "date-time"
        startTime:
          type: "string"
          nullable: true
        endTime:
          type: "string"
          nullable: true
        totalWorkingHour:
          type: "string"
          nullable: true
        totalWorkingHourInMinutes:
          type: "string"
          nullable: true
        statusType:
          $ref: "#/components/schemas/AttendanceStatusType"
        statusDisplayText:
          type: "string"
          nullable: true
        presenceStatus:
          $ref: "#/components/schemas/AttendanceStatusGroup"
        userId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
        isEdited:
          type: "boolean"
    AttendanceUpsertDto:
      required:
      - "date"
      - "endTime"
      - "startTime"
      - "userId"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        date:
          type: "string"
          format: "date-time"
        startTime:
          maxLength: 200
          type: "string"
        endTime:
          maxLength: 200
          type: "string"
        userId:
          type: "integer"
          format: "int32"
    EntryStatusDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
        isPresent:
          type: "boolean"
    TeamAttendanceStatusDto:
      type: "object"
      properties:
        teamId:
          type: "integer"
          format: "int32"
        teamName:
          type: "string"
          nullable: true
        membersAttendanceStatus:
          type: "array"
          items:
            $ref: "#/components/schemas/EntryStatusDto"
          nullable: true
    StatusTypeDto:
      type: "object"
      properties:
        value:
          type: "integer"
          format: "int32"
        displayName:
          type: "string"
          nullable: true
    InternalLoginDto:
      required:
      - "email"
      - "password"
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    Role:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: "integer"
      format: "int32"
    AuthenticationUserResponseDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        email:
          type: "string"
          nullable: true
        role:
          $ref: "#/components/schemas/Role"
        token:
          type: "string"
          nullable: true
        hasAdminPermission:
          type: "boolean"
          readOnly: true
        hasHrPermission:
          type: "boolean"
          readOnly: true
        hasTeamManagerPermission:
          type: "boolean"
          readOnly: true
        id:
          type: "integer"
          format: "int32"
    GoogleLoginDto:
      required:
      - "googleTokenID"
      type: "object"
      properties:
        googleTokenID:
          type: "string"
    ApplicationStatus:
      enum:
      - 1
      - 2
      - 3
      - 4
      type: "integer"
      format: "int32"
    ExtraWorkApplicationInsertionDto:
      required:
      - "fromDate"
      - "status"
      - "toDate"
      - "totalHours"
      - "userId"
      type: "object"
      properties:
        totalHours:
          type: "number"
          format: "double"
        adjustmentType:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ApplicantDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        teamNames:
          type: "array"
          items:
            type: "string"
          nullable: true
    ExtraWorkApplicationDetailDto:
      required:
      - "fromDate"
      - "status"
      - "toDate"
      - "totalHours"
      - "userId"
      type: "object"
      properties:
        applicant:
          $ref: "#/components/schemas/ApplicantDto"
        adjustmentTypeDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        extraWorkStatusDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        paid:
          type: "boolean"
        totalHours:
          type: "number"
          format: "double"
        adjustmentType:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ExtraWorkApplicationUpdateDto:
      required:
      - "fromDate"
      - "status"
      - "toDate"
      - "totalHours"
      - "userId"
      type: "object"
      properties:
        paid:
          type: "boolean"
        totalHours:
          type: "number"
          format: "double"
        adjustmentType:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ExtraWorkStatusChangeDto:
      required:
      - "status"
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ExtraWorkDataImportDto:
      type: "object"
      properties:
        email:
          type: "string"
          nullable: true
        extraWorkingDayType:
          type: "string"
          nullable: true
        fromDate:
          type: "string"
          nullable: true
        toDate:
          type: "string"
          nullable: true
        totalHours:
          type: "number"
          format: "double"
        isInvalid:
          type: "boolean"
        errorList:
          type: "array"
          items:
            type: "string"
          nullable: true
        comments:
          type: "string"
          nullable: true
    EnumDto:
      type: "object"
      properties:
        value:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
    FileUpsertDto:
      required:
      - "formFile"
      type: "object"
      properties:
        formFile:
          type: "string"
          format: "binary"
        fileType:
          type: "string"
          nullable: true
    ImageDimension:
      type: "object"
      properties:
        minWidth:
          type: "integer"
          format: "int32"
        maxWidth:
          type: "integer"
          format: "int32"
        minHeight:
          type: "integer"
          format: "int32"
        maxHeight:
          type: "integer"
          format: "int32"
        shouldSquareShaped:
          type: "boolean"
    FileValidationCriteria:
      type: "object"
      properties:
        fileType:
          type: "string"
          nullable: true
        maxSizeInBytes:
          type: "integer"
          format: "int64"
          nullable: true
        allowedExtensions:
          type: "array"
          items:
            type: "string"
          nullable: true
        allowedImageDimension:
          $ref: "#/components/schemas/ImageDimension"
    LeaveStatus:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      type: "integer"
      format: "int32"
    LeaveApplicationDto:
      required:
      - "fromDate"
      - "status"
      - "toDate"
      - "totalNumberOfWorkingDays"
      - "userId"
      type: "object"
      properties:
        totalNumberOfWorkingDays:
          type: "number"
          format: "double"
        includeSingleHalfDay:
          type: "boolean"
          nullable: true
        leaveTypeDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        leaveType:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/LeaveStatus"
        leaveStatusDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        leaveSupportingDocumentName:
          type: "string"
          nullable: true
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    LeaveApplicationDetailDto:
      required:
      - "fromDate"
      - "status"
      - "toDate"
      - "totalNumberOfWorkingDays"
      - "userId"
      type: "object"
      properties:
        applicant:
          $ref: "#/components/schemas/ApplicantDto"
        totalNumberOfWorkingDays:
          type: "number"
          format: "double"
        includeSingleHalfDay:
          type: "boolean"
          nullable: true
        leaveTypeDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        leaveType:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/LeaveStatus"
        leaveStatusDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        leaveSupportingDocumentName:
          type: "string"
          nullable: true
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    LeaveStatusChangeDto:
      required:
      - "status"
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/LeaveStatus"
        message:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    LeaveDataImportDto:
      type: "object"
      properties:
        email:
          type: "string"
          nullable: true
        leaveTypeDisplayName:
          type: "string"
          nullable: true
        leaveType:
          type: "integer"
          format: "int32"
        fromDate:
          type: "string"
          nullable: true
        toDate:
          type: "string"
          nullable: true
        totalDays:
          type: "number"
          format: "double"
        includeHalfDay:
          type: "boolean"
        isInvalid:
          type: "boolean"
        errorList:
          type: "array"
          items:
            type: "string"
          nullable: true
        comments:
          type: "string"
          nullable: true
    LeaveBalanceSummaryDto:
      type: "object"
      properties:
        year:
          type: "integer"
          format: "int32"
        leaveType:
          type: "string"
          nullable: true
        forwardedLeave:
          type: "number"
          format: "double"
        currentYearLeave:
          type: "number"
          format: "double"
        extraWorkingDays:
          type: "number"
          format: "double"
        maximumAllowedLeave:
          type: "number"
          format: "double"
        approvedLeave:
          type: "number"
          format: "double"
        remainingLeave:
          type: "number"
          format: "double"
    LeaveStatisticsDto:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        employeeName:
          type: "string"
          nullable: true
        teamNames:
          type: "string"
          nullable: true
        year:
          type: "integer"
          format: "int32"
        totalAvailableLeaves:
          type: "number"
          format: "double"
        casualLeaves:
          type: "number"
          format: "double"
        remainingLeaves:
          type: "number"
          format: "double"
        sickLeaves:
          type: "number"
          format: "double"
        sickLeavesWoDoc:
          type: "number"
          format: "double"
        parentalLeaves:
          type: "number"
          format: "double"
        totalLeavesAvailed:
          type: "number"
          format: "double"
    LeaveCarryForwardDataImportDto:
      type: "object"
      properties:
        year:
          type: "integer"
          format: "int32"
        email:
          type: "string"
          nullable: true
        leaveTypeDisplayName:
          type: "string"
          nullable: true
        totalDays:
          type: "number"
          format: "double"
        isInvalid:
          type: "boolean"
        errorList:
          type: "array"
          items:
            type: "string"
          nullable: true
        comments:
          type: "string"
          nullable: true
    TimeSpan:
      type: "object"
      properties:
        ticks:
          type: "integer"
          format: "int64"
          readOnly: true
        days:
          type: "integer"
          format: "int32"
          readOnly: true
        hours:
          type: "integer"
          format: "int32"
          readOnly: true
        milliseconds:
          type: "integer"
          format: "int32"
          readOnly: true
        minutes:
          type: "integer"
          format: "int32"
          readOnly: true
        seconds:
          type: "integer"
          format: "int32"
          readOnly: true
        totalDays:
          type: "number"
          format: "double"
          readOnly: true
        totalHours:
          type: "number"
          format: "double"
          readOnly: true
        totalMilliseconds:
          type: "number"
          format: "double"
          readOnly: true
        totalMinutes:
          type: "number"
          format: "double"
          readOnly: true
        totalSeconds:
          type: "number"
          format: "double"
          readOnly: true
    OfficeTimingDto:
      required:
      - "isDefaultOfficeTiming"
      - "lunchHour"
      - "officeHour"
      - "officeStartGraceHour"
      - "officeStartTime"
      type: "object"
      properties:
        isDefaultOfficeTiming:
          type: "boolean"
        startDate:
          type: "string"
          format: "date-time"
          nullable: true
        endDate:
          type: "string"
          format: "date-time"
          nullable: true
        officeStartTime:
          $ref: "#/components/schemas/TimeSpan"
        officeStartGraceHour:
          type: "number"
          format: "double"
        officeHour:
          type: "number"
          format: "double"
        lunchHour:
          type: "number"
          format: "double"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    EducationTypeEnum:
      enum:
      - 1
      - 2
      - 3
      type: "integer"
      format: "int32"
    ProfileEducationInfoDto:
      type: "object"
      properties:
        educationType:
          $ref: "#/components/schemas/EducationTypeEnum"
        institute:
          type: "string"
          nullable: true
        degree:
          type: "string"
          nullable: true
        passingYear:
          type: "string"
          nullable: true
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ProfilePersonalInfoDto:
      type: "object"
      properties:
        bloodGroup:
          type: "string"
          nullable: true
        dateOfBirth:
          type: "string"
          format: "date-time"
          nullable: true
        age:
          type: "string"
          nullable: true
          readOnly: true
        maritalStatus:
          type: "string"
          nullable: true
        nidNumber:
          type: "string"
          nullable: true
        passportNumber:
          type: "string"
          nullable: true
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ProfileContactInfoDto:
      type: "object"
      properties:
        personalEmail:
          type: "string"
          nullable: true
        presentAddress:
          type: "string"
          nullable: true
        permanentAddress:
          type: "string"
          nullable: true
        secondaryContactName:
          type: "string"
          nullable: true
        secondaryContactPhoneNo:
          type: "string"
          nullable: true
        secondaryContactRelation:
          type: "string"
          nullable: true
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ProfileSkillInfoDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ProfileUpsertDto:
      required:
      - "userId"
      type: "object"
      properties:
        displayName:
          type: "string"
          nullable: true
        designation:
          type: "string"
          nullable: true
        role:
          type: "string"
          nullable: true
        teamRole:
          type: "string"
          nullable: true
        mobileNumber:
          type: "string"
          nullable: true
        slackDisplayName:
          type: "string"
          nullable: true
        photoFileName:
          type: "string"
          nullable: true
        joiningDate:
          type: "string"
          format: "date-time"
          nullable: true
        careerStartDate:
          type: "string"
          format: "date-time"
          nullable: true
        cvLink:
          type: "string"
          nullable: true
        userId:
          type: "integer"
          format: "int32"
        profileEducationInfoDto:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileEducationInfoDto"
          nullable: true
        profilePersonalInfoDto:
          $ref: "#/components/schemas/ProfilePersonalInfoDto"
        profileContactInfoDto:
          $ref: "#/components/schemas/ProfileContactInfoDto"
        profileSkillInfoDto:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileSkillInfoDto"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    UserDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        attSysUserId:
          type: "integer"
          format: "int32"
        email:
          type: "string"
          nullable: true
        role:
          $ref: "#/components/schemas/Role"
        joiningDate:
          type: "string"
          format: "date-time"
          nullable: true
        lastWorkingDate:
          type: "string"
          format: "date-time"
          nullable: true
        isActive:
          type: "boolean"
        clientEmail:
          type: "string"
          nullable: true
        hideEmail:
          type: "boolean"
        isSetLeaveBalanceToZero:
          type: "boolean"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    UserAttendanceStatDto:
      type: "object"
      properties:
        totalWorkingDays:
          type: "number"
          format: "double"
        officePresence:
          type: "number"
          format: "float"
        lateEntries:
          type: "integer"
          format: "int32"
        lessHours:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    UserLeaveStatDto:
      type: "object"
      properties:
        totalAvailableLeaves:
          type: "number"
          format: "float"
        casualLeaves:
          type: "number"
          format: "float"
        remainingLeaves:
          type: "number"
          format: "float"
        sickLeaves:
          type: "number"
          format: "float"
        parentalLeaves:
          type: "number"
          format: "float"
        unpaidLeaves:
          type: "number"
          format: "float"
        leavesAvailed:
          type: "number"
          format: "float"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    ProfileDto:
      type: "object"
      properties:
        userDto:
          $ref: "#/components/schemas/UserDto"
        displayName:
          type: "string"
          nullable: true
        designation:
          type: "string"
          nullable: true
        slackDisplayName:
          type: "string"
          nullable: true
        email:
          type: "string"
          nullable: true
        mobileNumber:
          type: "string"
          nullable: true
        photoFileName:
          type: "string"
          nullable: true
        joiningDate:
          type: "string"
          format: "date-time"
          nullable: true
        yearsOfExperienceAtCefalo:
          type: "string"
          nullable: true
        totalWorkingExperience:
          type: "string"
          nullable: true
        careerStartDate:
          type: "string"
          format: "date-time"
          nullable: true
        profileEducationInfoDto:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileEducationInfoDto"
          nullable: true
        skills:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileSkillInfoDto"
          nullable: true
        profilePersonalInfoDto:
          $ref: "#/components/schemas/ProfilePersonalInfoDto"
        profileContactInfoDto:
          $ref: "#/components/schemas/ProfileContactInfoDto"
        userAttendanceStatDto:
          $ref: "#/components/schemas/UserAttendanceStatDto"
        userLeaveStatDto:
          $ref: "#/components/schemas/UserLeaveStatDto"
        role:
          type: "string"
          nullable: true
        teamRole:
          type: "string"
          nullable: true
        department:
          type: "string"
          nullable: true
        cvLink:
          type: "string"
          nullable: true
        userId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
        teamNames:
          type: "array"
          items:
            type: "string"
          nullable: true
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    PublicHolidayDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        date:
          type: "string"
          format: "date-time"
        dayName:
          type: "string"
          nullable: true
          readOnly: true
        ticks:
          type: "integer"
          format: "int64"
          readOnly: true
        isPast:
          type: "boolean"
          readOnly: true
    RemoteWorkApplicationStatus:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      type: "integer"
      format: "int32"
    RemoteWorkApplicationDto:
      required:
      - "fromDate"
      - "toDate"
      - "totalNumberOfWorkingDays"
      - "type"
      - "userId"
      type: "object"
      properties:
        applicant:
          $ref: "#/components/schemas/ApplicantDto"
        totalNumberOfWorkingDays:
          type: "integer"
          format: "int32"
        remoteWorkTypeDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        type:
          type: "integer"
          format: "int32"
        status:
          $ref: "#/components/schemas/RemoteWorkApplicationStatus"
        remoteWorkStatusDisplayName:
          type: "string"
          nullable: true
          readOnly: true
        userId:
          type: "integer"
          format: "int32"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        fromDate:
          type: "string"
          format: "date-time"
        toDate:
          type: "string"
          format: "date-time"
        description:
          type: "string"
          nullable: true
        supervisorComment:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    RemoteWorkStatusTypeDto:
      type: "object"
      properties:
        value:
          type: "integer"
          format: "int32"
        displayName:
          type: "string"
          nullable: true
    RemoteWorkChangeStatusDto:
      required:
      - "status"
      type: "object"
      properties:
        status:
          $ref: "#/components/schemas/RemoteWorkApplicationStatus"
        message:
          type: "string"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    SettingsDto:
      required:
      - "adminEmail"
      - "allowedCancellationPeriod"
      - "casualLeavePerMonth"
      - "internalLoginEmail"
      - "internalLoginPassword"
      - "maxForwardedLeave"
      - "minimumHalfDayWorkingHour"
      - "minimumHoursForDeductingLunchTime"
      - "sickLeaveWithoutDocPerYear"
      - "totalSickLeavePerYear"
      - "weeklyWorkFromHomeLimit"
      type: "object"
      properties:
        adminEmail:
          type: "string"
          format: "email"
        applicationRequestEmailRecipients:
          type: "string"
          nullable: true
        applicationConfirmationEmailRecipients:
          type: "string"
          nullable: true
        internalLoginEmail:
          type: "string"
          format: "email"
        internalLoginPassword:
          type: "string"
        minimumHoursForDeductingLunchTime:
          type: "number"
          format: "double"
        minimumHalfDayWorkingHour:
          type: "number"
          format: "double"
        casualLeavePerMonth:
          type: "number"
          format: "double"
        maxForwardedLeave:
          type: "number"
          format: "double"
        sickLeaveWithoutDocPerYear:
          type: "number"
          format: "double"
        totalSickLeavePerYear:
          type: "number"
          format: "double"
        allowedCancellationPeriod:
          type: "integer"
          format: "int32"
        weeklyWorkFromHomeLimit:
          type: "integer"
          format: "int32"
        knowledgeSharingSessionsDocsUrl:
          type: "string"
          nullable: true
        hrPolicyDocsUrl:
          type: "string"
          nullable: true
        itPolicyDocsUrl:
          type: "string"
          nullable: true
        profilePersonalInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        profileContactInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        profileEducationInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        profileLeaveStatisticsInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        profileAttendanceInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    LeaveSettingsDto:
      type: "object"
      properties:
        allowedCancellationPeriod:
          type: "integer"
          format: "int32"
        casualLeavePerMonth:
          type: "number"
          format: "double"
        maxForwardedLeave:
          type: "number"
          format: "double"
        sickLeaveWithoutDocPerYear:
          type: "number"
          format: "double"
        totalSickLeavePerYear:
          type: "number"
          format: "double"
    PolicyDocsSettingsDto:
      type: "object"
      properties:
        knowledgeSharingSessionsDocsUrl:
          type: "string"
          nullable: true
        hrPolicyDocsUrl:
          type: "string"
          nullable: true
        itPolicyDocsUrl:
          type: "string"
          nullable: true
    ProfileSettingsDto:
      type: "object"
      properties:
        personalInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        contactInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        educationInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        leaveStatisticsInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
        attendanceInfoViewers:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
          nullable: true
    TeamDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        teamEmail:
          type: "string"
          nullable: true
        clientEmail:
          type: "string"
          nullable: true
        isActive:
          type: "boolean"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    TeamUpsertDto:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
        teamEmail:
          maxLength: 150
          type: "string"
          format: "email"
          nullable: true
        clientEmail:
          maxLength: 1500
          type: "string"
          nullable: true
        isActive:
          type: "boolean"
        id:
          type: "integer"
          format: "int32"
    TeamMemberDto:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        displayName:
          type: "string"
          nullable: true
        email:
          type: "string"
          nullable: true
        designation:
          type: "string"
          nullable: true
        role:
          type: "string"
          nullable: true
        teamNames:
          type: "array"
          items:
            type: "string"
          nullable: true
        isActive:
          type: "boolean"
        id:
          type: "integer"
          format: "int32"
    TeamWithMembersDto:
      type: "object"
      properties:
        members:
          type: "array"
          items:
            $ref: "#/components/schemas/TeamMemberDto"
          nullable: true
        name:
          type: "string"
          nullable: true
        teamEmail:
          type: "string"
          nullable: true
        clientEmail:
          type: "string"
          nullable: true
        isActive:
          type: "boolean"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    UserWithTeamDto:
      type: "object"
      properties:
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/TeamDto"
          nullable: true
        name:
          type: "string"
          nullable: true
        attSysUserId:
          type: "integer"
          format: "int32"
        email:
          type: "string"
          nullable: true
        role:
          $ref: "#/components/schemas/Role"
        joiningDate:
          type: "string"
          format: "date-time"
          nullable: true
        lastWorkingDate:
          type: "string"
          format: "date-time"
          nullable: true
        isActive:
          type: "boolean"
        clientEmail:
          type: "string"
          nullable: true
        hideEmail:
          type: "boolean"
        isSetLeaveBalanceToZero:
          type: "boolean"
        created:
          type: "string"
          format: "date-time"
          nullable: true
        lastModified:
          type: "string"
          format: "date-time"
          nullable: true
        creatorId:
          type: "integer"
          format: "int32"
          nullable: true
        creatorName:
          type: "string"
          nullable: true
        lastModifierName:
          type: "string"
          nullable: true
        lastModifierId:
          type: "integer"
          format: "int32"
          nullable: true
        id:
          type: "integer"
          format: "int32"
    UserUpsertDto:
      required:
      - "attSysUserId"
      - "email"
      - "name"
      - "role"
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
          format: "email"
        role:
          $ref: "#/components/schemas/Role"
        attSysUserId:
          type: "integer"
          format: "int32"
        isActive:
          type: "boolean"
        hideEmail:
          type: "boolean"
        clientEmail:
          type: "string"
          nullable: true
        teamIds:
          type: "array"
          items:
            type: "integer"
            format: "int32"
          nullable: true
        joiningDate:
          type: "string"
          format: "date-time"
          nullable: true
        lastWorkingDate:
          type: "string"
          format: "date-time"
          nullable: true
        isSetLeaveBalanceToZero:
          type: "boolean"
        id:
          type: "integer"
          format: "int32"
  securitySchemes:
    Bearer:
      type: "apiKey"
      description: "JWT Authorization header using the Bearer scheme"
      name: "Authorization"
      in: "header"
security:
- Bearer: []
